<?php
/**
 * Vassilymas
 *
 * @license - $License: http://www.gnu.org/licenses/gpl.txt $
 *
 * @author - $Author: enkil2003 $
 * @date - $Date: 2012-01-01 15:17:22 -0300 (Sun, 01 Jan 2012) $
 * 
 * @filesource - $HeadURL: https://subversion.assembla.com/svn/vassilymas/trunk/src/application/models/User.php $
 * @revision - $Revision: 338 $
 * 
 * @LastChangedBy $LastChangedBy: enkil2003 $
 * @lastChangedDate - $LastChangedDate: 2012-01-01 15:17:22 -0300 (Sun, 01 Jan 2012) $
 * 
 * @copyright - Copyright: (c) 2011 and future, Ricardo Buquet
 */

/**
 * User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: User.php 338 2012-01-01 18:17:22Z enkil2003 $
 */
class User extends BaseUser
{
    const NOT_FOUND = 1;
    const WRONG_PSW = 2;
    const NOT_ACTIVE = 3;
    const NOT_FOUND_MESSAGE = 'The specified user does not exists';
    const WRONG_PSW_MESSAGE = 'Wrong password';
    const NOT_ACTIVE_MESSAGE = 'The user and password match, but it was not activated';
    
    /**
     * Add a new User.
     * @param array $uservalues
     * @param array $userdata
     * @return void
     */
    public static function addUser(array $uservalues, array $userdata = array())
    {
        $user = new User();
        $user->rol = Rol::USER;
        foreach($uservalues as $key => $value) {
            $user->$key = $value;
        }
        $user->save();
        
        /* @TODO seguro se puede hacer mejor, no se como preguntar el last inserted id */
        /* @TODO Mirar como hice la parte de asociar contactos al usuario, creo que viene por ahi */
        $user = Doctrine_Core::getTable('User')->findOneByUsername($uservalues['username'])->toArray();
        foreach ($userdata as $field => $value) {
            $ud = new Userdata();
            $ud->user = $user['id'];
            $ud->field = $field;
            $ud->value = $value;
            $ud->save();
        }
    }
    /**
     * Updates an user.
     * @param array $userValues
     * @param array $userData
     * @return void
     */
    public static function updateUser(array $userValues, array $userData = array())
    {
        // save basic user's information
        $user = Doctrine_Core::getTable('User')->findOneById($userValues['id']);
        $user->fromArray($userValues);
        $user->save();
        
        // save user extra data
        foreach ($userData as $field => $value) {
            Doctrine_Query::create()
                ->update('Userdata ud')
                ->where('User = ?', $user['id'])
                ->andWhere('field = ?', $field)
                ->set('value', '?', $value)
                ->execute();
        }
    }
    /**
     * Authenticas an user.
     * @param String $email
     * @param String $password
     * @throws Exception
     * @return User
     */
    public static function authenticate($email, $password)
    {
        $user = Doctrine_Query::create()
            ->select('u.id, u.username, u.email, u.password, u.active, r.rol,')
            ->from('User u')
            ->innerJoin('u.Rol r')
            ->where("username = '$email' OR email = '$email'")
            ->andWhere("password = '$password'")
            ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
        if (!$user) {
            throw new Exception(self::NOT_FOUND_MESSAGE, self::NOT_FOUND);
        } else if (!$user['active']) {
            throw new Exception(self::NOT_ACTIVE_MESSAGE, self::NOT_ACTIVE);
        }
        return $user;
    }
    
    public static function getUserData($id)
    {
        $userData = Doctrine_Core::getTable('Userdata')->findByUser($id)->toArray();
        $data = array();
        foreach ($userData as $ud) {
            $data[$ud['field']] = $ud['value']; 
        }
        return array_merge(
            Doctrine_Core::getTable('User')->findOneById($id)->toArray(),
            $data
        );
    }
    
    public static function activateUser($confirmationCode)
    {
        $q = Doctrine_Query::create()
            ->update('User')
            ->set('active', 1)
            ->where('confirmation_code = ?', $confirmationCode)
            ->execute();
    }
    
    /**
     * Sets the reset code and actual timestamp for given email.
     * @param string $email
     * @param string $code
     * @return void
     */
    public static function setResetCode($email, $code)
    {
        Doctrine_Query::create()
            ->update('User')
            ->set("reset_code", "'$code'")
            ->set('timestamp_reset_code', 'NOW()')
            ->where('email = ?', $email)
            ->execute();
    }
    /**
     * Confirms the password change for passwords resetes no older than 1 day, and returns a new one.
     * @param string $code reset code to match against
     * @return mixed the new password or false if couldn't update the row
     */
    public static function confirmResetCode($code)
    {
        $password = self::createPassword();
        $result = Doctrine_Query::create()
            ->update('User')
            ->set('password', "'$password'")
            ->set('reset_code', 'NULL')
            ->set('timestamp_reset_code', 'NULL')
            ->where('reset_code = ?', $code)
            ->andWhere('timestamp_reset_code > DATE_SUB(NOW(),INTERVAL 1 DAY)')
            ->execute();
        if ($result) {
            return $password;
        }
    }
    /**
     * Generates a random password.
     * @return string
     */
    public static function createPassword($syllables = 3, $use_prefix = false)
    {
        // Define function unless it is already exists
        if (!function_exists('ae_arr')) {
            // This function returns random array element
            function ae_arr(&$arr) {
                return $arr[rand(0, sizeof($arr)-1)];
            }
        }
        // 20 prefixes
        $prefix = array('aero', 'anti', 'auto', 'bi', 'bio',
                        'cine', 'deca', 'demo', 'dyna', 'eco',
                        'ergo', 'geo', 'gyno', 'hypo', 'kilo',
                        'mega', 'tera', 'mini', 'nano', 'duo');
        // 10 random suffixes
        $suffix = array('dom', 'ity', 'ment', 'sion', 'ness', 'ence', 'er', 'ist', 'tion', 'or'); 
        // 8 vowel sounds 
        $vowels = array('a', 'o', 'e', 'i', 'y', 'u', 'ou', 'oo'); 
        // 20 random consonants 
        $consonants = array('w', 'r', 't', 'p', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'qu');
        $password = $use_prefix?ae_arr($prefix):'';
        $password_suffix = ae_arr($suffix);
        for($i=0; $i<$syllables; $i++) {
            // selecting random consonant
            $doubles = array('n', 'm', 't', 's');
            $c = ae_arr($consonants);
            if (in_array($c, $doubles)&&($i!=0)) { // maybe double it
                if (rand(0, 2) == 1) // 33% probability
                    $c .= $c;
            }
            $password .= $c;
            //
            // selecting random vowel
            $password .= ae_arr($vowels);
            if ($i == $syllables - 1) // if suffix begin with vovel
                if (in_array($password_suffix[0], $vowels)) // add one more consonant 
                    $password .= ae_arr($consonants);
        }
        // selecting random suffix
        $password .= $password_suffix;
        return $password;
    }
    /**
     * Returns the full name of the user.
     * @param string $email user's email
     * @return string Full user's name 
     */
    public function getUserFullNameByEmail($email)
    {
        // find the user id
        $user = Doctrine_Query::create()
            ->select('u.id')
            ->from('User u')
            ->where('u.email = ?', $email)
            ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
        
        return Userdata::getFullNameByUserId($user['id']);
    }
    /**
     * This function returns the user by reset code, is used just before changing the password, so
     * we can get the data, and send the email with a personalized email
     * @param string $code
     * @return array user
     */
    public function getUserByResetCode($code)
    {
        $user = Doctrine_Query::create()
            ->select(
                'u.id, u.Rol,
                u.username,
                u.email,
                u.password,
                u.confirmation_code,
                u.active,
                u.reset_code,
                u.timestamp_reset_code'
            )->from('User u')
            ->where('u.reset_code = ?', $code)
            ->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
        
        return $user;
    }
}