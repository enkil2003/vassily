<?php
/**
 * Vassilymas
 *
 * @license - $License: http://www.gnu.org/licenses/gpl.txt $
 *
 * @author - $Author: enkil2003 $
 * @date - $Date: 2012-02-26 17:38:01 -0300 (Sun, 26 Feb 2012) $
 * 
 * @filesource - $HeadURL: https://subversion.assembla.com/svn/vassilymas/trunk/src/application/models/Products.php $
 * @revision - $Revision: 437 $
 * 
 * @LastChangedBy $LastChangedBy: enkil2003 $
 * @lastChangedDate - $LastChangedDate: 2012-02-26 17:38:01 -0300 (Sun, 26 Feb 2012) $
 * 
 * @copyright - Copyright: (c) 2011 and future, Ricardo Buquet
 */

/**
 * Products
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Products.php 437 2012-02-26 20:38:01Z enkil2003 $
 */
class Products extends BaseProducts
{
    const TEMP_DIR = '/../public/uploads/temp';
    const DEST_DIR = '/../public/uploads/image';
    const THUMB_DIR = '/../public/uploads/thumb';
    const PRODUCTS_PER_PAGE = 6;
    private static function _getProductBaseQuery()
    {
        $q = Doctrine_Query::create()
            ->select('c.id, c.name, s.name, shp.subcategories_id, p.id, p.name, p.description, i.name')
            ->from('Products p')
            ->leftJoin('p.SubcategoriesHasProducts shp')
            ->leftJoin('shp.Subcategories s')
            ->innerJoin('s.Category c')
            ->leftJoin('p.Images i');
        return $q;
    }
    /**
     * Returns random products from a category
     * @param int $category
     * @param string $mode
     * @return stdClass
     */
    public static function getRandomProductsByCategoryName($category, $mode = Doctrine_Core::HYDRATE_ARRAY)
    {
        $q = self::_getProductBaseQuery();
        $q->where('c.name = ?', $category)
                ->orderBy('RAND()');
        $q->limit(self::PRODUCTS_PER_PAGE);
        $return = new stdClass();
        $return->products = $q->execute(array(), $mode);
        return $return;
    }
    /**
     * Returns paginated products by subcategory
     * @param int $subcategoryId subcategory's id
     * @param int $currentPage [optional] page you are looking for, if null, you will get all the products
     * @param string $mode [optional] fetching mode, default: Doctrine_Core::HYDRATE_ARRAY
     * @return mixed array if no $mode is passed
     */
    public static function getProductsBySubcategoryId(
        $subcategoryId, $currentPage = null, $mode = Doctrine_Core::HYDRATE_ARRAY)
    {
        $q = self::_getProductBaseQuery();
        $q->where('s.id = ?', $subcategoryId)
            ->orderBy('p.id');
        if (null === $currentPage) {
            return $q->execute(array(), $mode);
        }
        $pager = new Doctrine_Pager(
            $q,
            $currentPage,
            self::PRODUCTS_PER_PAGE
        );
        return $pager->execute(array(), $mode);
    }
    
    /**
     * Returns a page from the subcategory and his pager layout
     * @param int $subcategoryId
     * @param int $currentPage
     * @param string $mode
     * @return stdClass contains products array and pagerLayout object
     */
    public static function getProductsAndPagerBySubcategoryId(
        $subcategoryId, $currentPage, $mode = Doctrine_Core::HYDRATE_ARRAY)
    {
        $q = self::_getProductBaseQuery();
        $q->where('s.id = ?', $subcategoryId)
            ->orderBy('p.id');
            
        $pager = new Doctrine_Pager(
            $q,
            $currentPage,
            self::PRODUCTS_PER_PAGE
        );
        
        // prepare url params
        $urlParams = $_GET;
        unset($urlParams['pagina']);
        $params = '';
        foreach($urlParams as $key => $value) {
            $params .= "&$key=$value";
        }
        // end preparing params..
        
        $pagerLayout = new Doctrine_Pager_Layout(
            $pager,
            new Doctrine_Pager_Range_Sliding(array(
                'chunk' => 5
            )),
            "?pagina={%page_number}$params"
        );
        $return = new stdClass();
        $return->products = $pagerLayout->execute(array(), $mode);
        $return->pager = $pagerLayout;
        return $return;
    }
    
    /**
     * Returns a product.
     * @param int $productId product's id
     * @return array
     */
    public static function getProductById($productId)
    {
        $q = new Doctrine_Query();
        $q->select('p.*, i.*')
          ->from('Products p')
          ->leftJoin('p.Images i')
          ->where('p.id = ?', $productId);
        $product = $q->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
        return $product;
    }
    /**
     * Deletes products and related images
     * @param int $id product id
     * @return int affected rows
     */
    public static function deleteById($id)
    {
        $product = Products::getProductById($id);
        foreach($product['Images'] as $image) {
            unlink(APPLICATION_PATH.self::DEST_DIR.'/'.$image['name']);
            unlink(APPLICATION_PATH.self::THUMB_DIR.'/'.$image['name']);
        }
        $q = new Doctrine_Query();
        return $q->delete('Products')
            ->where("id = $id")
            ->execute();
    }
}
